// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  firstName      String    @db.VarChar(255)
  lastName       String    @db.VarChar(255)
  username       String    @db.VarChar(100)
  email          String    @unique @db.VarChar(150)
  password       String    @db.VarChar(100)
  NIM            String    @db.VarChar(20)
  licensePlate   String    @db.VarChar(100)
  SIM            String    @db.Text
  token          String?   @db.Text
  profilePicture String?   @db.Text
  reservations   Reservation[]
  penalties      Penalty[]
  reports        Report[]
}

model Reservation {
  id          Int        @id @default(autoincrement())
  status      String     @db.VarChar(20) // "active" or "complete"
  inAt        DateTime
  outAt       DateTime?
  userId      Int
  lotId       Int
  qrId        Int        @unique // Add @unique to enforce one-to-one relationship

  user        User       @relation(fields: [userId], references: [id])
  parkingLot  ParkingLot @relation(fields: [lotId], references: [id])
  qrCode      QrCode     @relation(fields: [qrId], references: [id])
}

model ParkingLot {
  id         Int           @id @default(autoincrement())
  floor      String        @db.VarChar(20)
  number     String        @db.VarChar(20)
  status     String        @db.VarChar(20) // "taken" or "empty"
  reservations Reservation[]
}

model Traffic {
  id         Int     @id @default(autoincrement())
  day        String  @unique @db.VarChar(20) // e.g., "Monday"
  amount     Int
}

model Penalty {
  id         Int     @id @default(autoincrement())
  description String @db.Text
  userId      Int

  user       User    @relation(fields: [userId], references: [id])
}

model QrCode {
  id         Int     @id @default(autoincrement())
  qrIn       String  @db.Text
  qrOut      String  @db.Text
  reservation Reservation?
}

model Report {
  id           Int     @id @default(autoincrement())
  description  String  @db.Text
  image        String  @db.Text
  licensePlate String  @db.VarChar(100)
  userId       Int

  user         User    @relation(fields: [userId], references: [id])
}
